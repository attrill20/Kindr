==== ./src/App.css ====
/* DESIGN SYSTEM */

/* Main font: 

@import url("https://use.typekit.net/ycz4yvq.css");

--- TYPOGRAPHY 
Mobile Font sizes (px)
11 / 16 / 30 

Desktop Font sizes (px)
10 / 12 / 14 / 16 / 18 / 20 / 24 / 30 / 64 / 86

/* Main font: 

@import url("https://use.typekit.net/ycz4yvq.css");

.small-text {
  font-family: "futura-pt", sans-serif;
  font-weight: 500;
  font-style: normal;
  font-size: 11pt;
}

.medium-text {
  font-family: "futura-pt", sans-serif;
  font-weight: 500;
  font-style: normal;
  font-size: 16pt;
}
--- 02: COLORS

- Primary: #01BBE4

- Secondary:
#FFFFFF 
#85F291
#CAF1F9
#FDB645

--- 05 SHADOWS

0 2.4rem 4.8rem rgba(0, 0, 0, 0.075);

--- 06 BORDER-RADIUS

Default: 9px
Medium: 11px

--- 07 WHITESPACE

- Spacing system (px)
2 / 4 / 8 / 12 / 16 / 24 / 32 / 48 / 64 / 80 / 96 / 128 */


 /* .home {
  background-image: url("/src/imgs/desktop/bg1.png");
background-repeat: no-repeat;
background-size: cover;
}  */


:root{
  --primary-background-colour: #FFFFFF;
  --primary-blue: #01BBE4;
  --primary-green: #85F291;
  --secondary-blue: #CAF1F9;
  --in-progress: #FDB645;
  --text-colour: #000000;
  --gradient: linear-gradient(90deg, rgba(1,187,228,1) 62%, rgba(1,228,216,1) 88%, rgba(133,242,145,1) 100%);
  }
/* Header Gradient */
.myGradient {
  background: var(--primary-blue);
/* background: linear-gradient(90deg, rgba(1,187,228,1) 62%, rgba(1,228,216,1) 88%, rgba(133,242,145,1) 100%); */
background: var(--gradient)
}

.App {
  text-align: center;
  /* background: linear-gradient(180deg, rgba(1,187,228,1) 40%, rgba(133,242,145,1) 100%); */
  height: 100vh;
  /* background-image: url("/src/imgs/desktop/bg6.png"); */
  background-repeat: no-repeat;
  background-size: cover;
}

/* @media only screen and (max-width: 600px) {
  .App {
    background-image: none;
  }
} */

/* body {
  background: linear-gradient(180deg, rgba(1,187,228,1) 62%, rgba(1,228,216,1) 88%, rgba(133,242,145,1) 100%);
} */
h1 {
  font-family: "futura-pt-bold", sans-serif;
  font-weight: 700;
  font-style: normal;
  font-size: 24pt;
}
p {
  font-family: "futura-pt", sans-serif;
  font-weight: 500;
  font-style: normal;
  font-size: 11pt;
}
h2 {
  font-family: "futura-pt", sans-serif;
  font-weight: 500;
  font-style: normal;
  font-size: 16pt;
  /* height: 3em; */
}
.home-buttons {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  margin-top: 3rem;
}
/* Buttons */
.button {
  width: 150px;
  height: 37px;
  background: var(--primary-blue);
  border-radius: 30px;
  margin: 10px;
  border: none;
  color: var(--primary-background-colour);
  font-size: 16pt;
}
.button-blue {
  width: 200px;
  height: 37px;
  background: var(--primary-blue);
  border-radius: 30px;
  margin: 10px;
  border: none;
  color: #000;
  font-size: 16pt;
}
.button-green {
  width: 200px;
  height: 37px;
  background: var(--primary-green);
  border-radius: 30px;
  margin: 10px;
  border: none;
  color: #000;
  font-size: 16pt;
}

.disable-button{
  width: 150px;
  height: 37px;
  background: #C4C4C4;
  border-radius: 30px;
  margin: 10px;
  border: none;
  color: #000;
  font-size: 16pt;
}

 All items in Browse Page
.browse-container{
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  }
  .browse-container > * {
    margin-left: 4%;
  }
/* All task cards in a list */
.tasklist-container {
  display: grid;
@media screen and (min-width: 600px) {
  grid-template-columns: 1fr 1fr;
  grid-template-rows: 3fr;
}
}
.tasklist-container > * {
  width: 90%;
  margin: 0.5%;
  }
/* Task Cards */
.task-card {
display: flex;
flex-direction: row;
background-color: var(--primary-background-colour) ;
border-radius: 10px;
box-shadow: 3px 5px 10px rgb(0 0 0 / 0.2);
color: var(--text-colour);
font-family: "futura-pt", sans-serif;
font-weight: 500;
font-style: normal;
font-size: 11pt;
width: 100%;
height: 100%;
grid-column: 1 3;
cursor: pointer;
/* padding: 5%; */
}
.task-card:hover {
  background-color: #f8fcff;
  transition: 0.3s;
  transform: translateY(-0.1rem);
}

.category-icon {
width: 90%;
}
.image {
  background-color: var(--secondary-blue);
  width: 30%;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 10px 0px 0px 10px;
}
.card-info {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  text-align: left;
  padding: 5%;
  width:75%;
  /* gap: 1rem; */
}
#logo {
  margin: 5%;
}
#hearticon {
  max-width: 70%;
  padding: 5%;
}
.illustrationsHome{
  height: 200px;
  margin-top: 5rem;
}
.illustrationPost {
  height: 200px;
}
.illustrationVolunteer {
  height: 200px;
}



==== ./src/App.js ====
import { BrowserRouter, Route, Routes } from "react-router-dom";
import { createClient } from "@supabase/supabase-js";
import { useState, useEffect } from "react";
import "./App.css";
import HomePage from "./pages/Home";
// import TopNav from "./components/TopNav/topNav";
import BrowsePage from "./pages/Browse";
import CategoryTilesPage from "./pages/SelectCategory";
import CreateTaskPage from "./pages/CreateTask";
import ViewTaskPage from "./pages/ViewTask";
import SuccessPage from "./pages/Success";
import MyTasksPage from "./pages/MyTasks";
import tyreIcon from "../src/imgs/icons/tire.png";
import gardenIcon from "../src/imgs/icons/gardening.png";
import shopIcon from "../src/imgs/icons/shopping-bags.png";
import houseWorkIcon from "../src/imgs/icons/house.png";
import deliveryIcon from "../src/imgs/icons/delivery-truck.png";
import otherIcon from "../src/imgs/icons/question-mark.png";
import Navbar from "./components/Navbar/Navbar";

const supabase = createClient(
  process.env.REACT_APP_SUPABASE_URL,
  process.env.REACT_APP_SUPABASE_KEY
);

function App() {
  const [tasks, setTasks] = useState([]);
  // const [isMobile, setIsMobile] = useState(false);
  const [category, setCategory] = useState([]);
  const [categoryIcons, setCategoryIcons] = useState([]);
  const [selectedTask, setSelectedTask] = useState(0);

  useEffect(() => {
    getTasks();
    setCategoryIcons([
      { id: 1, image: tyreIcon },
      { id: 2, image: gardenIcon },
      { id: 3, image: shopIcon },
      { id: 4, image: houseWorkIcon },
      { id: 5, image: deliveryIcon },
      { id: 6, image: otherIcon },
    ]);
  }, []);

  async function getTasks() {
    let { data, error } = await supabase
      .from("tasks")
      .select("*")
      .order("id", { ascending: false });
    if (error) {
      console.log("error", error);
    }
    setTasks(data);
  }

  //   useEffect(() => {
  //     const checkScreenWidth = () => {
  //       setIsMobile(window.innerWidth <= 500);
  //     };

  //     checkScreenWidth();
  //     window.addEventListener('resize', checkScreenWidth);
  //   return () => {
  //     window.removeEventListener('resize', checkScreenWidth);
  //   };
  // }, []);

  return (
    <div className="App">
      <BrowserRouter>
        {/* {!isMobile && <TopNav />}
        <TopNav /> */}
        <Navbar categoryIcons={categoryIcons} />

        <div>
          <Routes>
            <Route path="/" element={<HomePage />} />
            <Route
              path="/browse"
              element={
                <BrowsePage
                  category={category}
                  setCategory={setCategory}
                  tasks={tasks}
                  setSelectedTask={setSelectedTask}
                  categoryIcons={categoryIcons}
                />
              }
            />
            <Route
              path="/mytasks"
              element={
                <MyTasksPage
                  tasks={tasks}
                  setSelectedTask={setSelectedTask}
                  categoryIcons={categoryIcons}
                />
              }
            />
            <Route
              path="/categories"
              element={
                <CategoryTilesPage
                  setCategory={setCategory}
                  categoryIcons={categoryIcons}
                />
              }
            />
            <Route
              path="/create"
              element={
                <CreateTaskPage
                  category={category}
                  setCategory={setCategory}
                  categoryIcons={categoryIcons}
                  getTasks={getTasks}
                />
              }
            />
            <Route
              path="/view"
              element={
                <ViewTaskPage
                  categoryIcons={categoryIcons}
                  selectedTask={selectedTask}
                  tasks={tasks}
                  getTasks={getTasks}
                />
              }
            />
            <Route path="/success" element={<SuccessPage />} />
          </Routes>
        </div>
      </BrowserRouter>
    </div>
  );
}

export default App;
==== ./src/App.test.js ====
import { render, screen } from "@testing-library/react";
import App from "./App";

test("check 'Home' is in the nav bar", () => {
  render(<App />);

  const linkElement = screen.getByText(/Home/i);
  expect(linkElement).toBeInTheDocument();
});

test("check 'Post a Task' is on the home page", () => {
  render(<App />);

  expect(screen.getByText(/Post a Task/i)).toBeInTheDocument();
});
==== ./src/components/CategoryScroll/categoryScroll.css ====
.main-container{
    display: flex;
    flex-direction: column;
    justify-content: center;
}

.scroll-container {
    display: flex;
    flex-direction: row;
    overflow-x: auto;
    overflow-y: hidden;
    height: 8%;
    -webkit-overflow-scrolling: touch;
    -ms-overflow-style: none;
    scrollbar-width: none;
    width: 100%;
    margin-bottom: 1rem;
    
 
}

.image-container{
width: 100%;
height: auto;
height: 100px;
padding: 5px;
margin: 3%;
display: flex;
justify-content: space-between;
}



 


.images{
    height:100% ;
}
==== ./src/components/CategoryScroll/categoryScroll.js ====
import "./categoryScroll.css";
import allIcon from "../../imgs/icons/all.png";

export default function CategoryScroll({
  category,
  setCategory,
  categoryIcons,
}) {
  return (
    <div className="main-container">
      <div className="scroll-container">
        <div className="image-container">
          <img className="images" src={allIcon} alt="all-icons" />
        </div>
        {categoryIcons.map((categoryIcon) => {
          return (
            <div className="image-container" key={categoryIcon.id}>
              <img
                className="images"
                src={categoryIcon.image}
                alt={categoryIcon.name}
              />
            </div>
          );
        })}
      </div>

      {/* <div>CategoryScroll says: category selected: {category}</div> */}
    </div>
  );
}

// import all icon

// take in the categoryIcons prop ✅
// map over the categoryIcons array

// for each categoryIcon, return a div with the icon and the name
// add an onClick to the div that calls setCategory with the category name
// add a className to the div that is "selected" if the category name matches the category prop
// add a className to the div that is "not-selected" if the category name does not match the category prop
==== ./src/components/CategoryTiles/categoryTiles.css ====
/* Category Choices on Select Category Page */
.category-container {
	display: flex;
	justify-content: center;

  }
  
  .category-container-inner {
	display: grid;
	grid-template-columns: repeat(3, 1fr);
	gap: 10px;
	max-width: 800px; /* Optional: Adjust the maximum width of the grid */
	margin: 0 auto; /* Optional: Centers the grid */

}

.category-item {
  display: flex;
	flex-direction: column;
	align-items: center;
	text-align: center;
  margin: 50px;
  cursor: pointer;
  box-shadow: 3px 5px 10px rgb(0 0 0 / 0.2);

    border-radius: 10px;
  width: 100%;
  border: 10px solid transparent;

  }

    .category-item:hover {
        background-color: #85F291;
        transition: 0.3s;
        transform: translateY(-0.1rem);
    }
  
  .category-item img {
	width: 200px; /* Adjust the image size as desired */
  }
  
  /* Media query for mobile devices */
  @media (max-width: 600px) {
	.category-container-inner {
	  grid-template-columns: repeat(2, 1fr);
	}

  .category-item{
    margin: 0px;
  }

  .category-item img {
    width: 100px; /* Adjust the image size as desired */
    }

  .header{
    margin-bottom: 1.5rem;
  }

  .category-h1{
    margin: 0 20px 10px;
  }
  }==== ./src/components/CategoryTiles/categoryTiles.js ====
import "./categoryTiles.css";

import { useNavigate } from "react-router-dom";

export default function CategoryTiles({ setCategory, categoryIcons }) {
  const navigate = useNavigate();

  function handleCategoryClick(categoryId) {
    setCategory(categoryId);
    navigate(`/create`);
  }

  return (
    <div>
      <h1 className="category-h1">Please select a category for this task</h1>
      <div className="category-container">
        <div className="category-container-inner">
          <div onClick={() => handleCategoryClick(1)} className="category-item">
            <img src={categoryIcons[0].image} alt="Transport" />
            <span>Transport</span>
          </div>
          <div onClick={() => handleCategoryClick(2)} className="category-item">
            <img src={categoryIcons[1].image} alt="Gardening" />
            <span>Gardening</span>
          </div>
          <div onClick={() => handleCategoryClick(3)} className="category-item">
            <img src={categoryIcons[2].image} alt="Shopping" />
            <span>Shopping</span>
          </div>
          <div onClick={() => handleCategoryClick(4)} className="category-item">
            <img src={categoryIcons[3].image} alt="Housework" />
            <span>Housework</span>
          </div>
          <div onClick={() => handleCategoryClick(5)} className="category-item">
            <img src={categoryIcons[4].image} alt="Delivery" />
            <span>Delivery</span>
          </div>
          <div onClick={() => handleCategoryClick(6)} className="category-item">
            <img src={categoryIcons[5].image} alt="Other" />
            <span>Other</span>
          </div>
        </div>
      </div>
    </div>
  );
}
==== ./src/components/HeartIcon/heartIcon.js ====
import hearticon from '../../imgs/icons/heart-icon.png'

export default function HeartIcon() {
    return (
      <div>
        <img id = "hearticon" src= {hearticon} alt = "heart-icon"/>
      </div>
    );
  }
  ==== ./src/components/MyContext/MyContext.js ====
import React from 'react';

const MyContext = React.createContext();

export default MyContext;
==== ./src/components/Navbar/navbar.css ====
@import url("https://fonts.googleapis.com/css2?family=Titillium+Web:wght@300;400;700&display=swap");

@import url("https://use.typekit.net/ycz4yvq.css");

* {
	padding: 0;
	margin: 0;
	box-sizing: border-box;
	font-family: "futura-pt", sans-serif;
}

:root {
	--mainColor: #01BBE4;
	--mainColorLight: #5767aa;
	--secondaryColor: #85F291;
	--textColor: #fff;
    --gradient: linear-gradient(90deg, rgba(1,187,228,1) 62%, rgba(1,228,216,1) 88%, rgba(133,242,145,1) 100%);
}

header {
	display: flex;
	align-items: center;
	justify-content: space-between;
	height: 80px;
	
	padding: 0 2rem;
	background: var(--gradient);
	color: var(--textColor);
	margin-bottom: 1rem;
}
/* this sets the text sizes for the nav links */
nav a {
	margin: 0 1rem;
	color: var(--textColor);
	text-decoration: none;
	font-size: 1.2rem;
	font-weight: 700;
	
}

nav a:hover {
	color: var(--secondaryColor);
}

.profile-pic {
    width: 30px;
    height: 30px;
    border-radius: 50%;
    object-fit: cover;
}

header .nav-btn {
	padding: 5px;
	cursor: pointer;
	background: transparent;
	border: none;
	outline: none;
	color: var(--textColor);
	visibility: hidden;
	opacity: 0;
	font-size: 1.8rem;
	
}

header div,
nav {
	display: flex;
	align-items: center;

}

@media only screen and (max-width: 600px) {
	header .nav-btn {
		visibility: visible;
		opacity: 1;
	}

	header nav {
		position: fixed;
		top: -100vh;
		left: 0;
		height: 100%;
		width: 100%;
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
		gap: 1.5rem;
		background-color: var(--mainColor);
		transition: 1s;
		
	}

	header .responsive_nav {
		transform: translateY(100vh);
	}

	nav .nav-close-btn {
		position: absolute;
		top: 2rem;
		right: 2rem;
	}

	nav a {
		font-size: 2.5rem;
	
	}
}
.profile-container {
	margin-left: auto;
  }==== ./src/components/Navbar/Navbar.js ====
import { useRef } from "react";
import { FaBars, FaTimes } from "react-icons/fa";
import "./navbar.css";
import logo from "../../imgs/logos/logo.png";
import profilePic from "../../imgs/logos/profile.png";
//import { Link } from "react-router-dom";

function Navbar() {
  const navRef = useRef();

  const showNavbar = () => {
    navRef.current.classList.toggle("responsive_nav");
  };

  return (
    <header>
     <a href="/"><img src={logo} className="logo" height="35px" alt="logo" /></a>
      <nav ref={navRef}>
        <a href="/">Home</a>
        {/* <a href="/categories">New Task</a> */}
        <a href="/browse">Browse Tasks</a>
        <a href="/mytasks">My Tasks</a>
        <a href="/my-profile">My Profile</a>
        <button className="nav-btn nav-close-btn" onClick={showNavbar}>
          <FaTimes />
        </button>
      </nav>
      <div className="profile-container">
        <a href="/my-profile">
          <img src={profilePic} className="profile-pic" alt="Profile" />
        </a>
      </div>
      <button className="nav-btn" onClick={showNavbar}>
        <FaBars />
      </button>
    </header>
  );
}

export default Navbar;
==== ./src/components/TaskCard/taskCard.js ====
import { useNavigate } from "react-router-dom";

export default function TaskCard({ task, setSelectedTask, categoryIcons }) {
  const navigate = useNavigate();

  function handleSelectTask(taskId) {
    return () => {
      setSelectedTask(taskId);
      navigate(`/view`);
    };
  }

  return (
    <div onClick={handleSelectTask(task.id)} className="task-card">
      <div className="image">
        <img
          className="category-icon"
          src={categoryIcons[task.category_id - 1].image}
          alt="task-icon"
        />
      </div>

      <div className="card-info">
        <h2>{task.title}</h2>
        <p>Duration: {task.duration}</p>
        <p>Location: {task.location}</p>
        <p>Creator ID: {task.creator_id}</p>
      </div>
    </div>
  );
}
==== ./src/components/TaskInfo/taskInfo.js ====
//import { is } from "@babel/types";
import { createClient } from "@supabase/supabase-js";
import { useNavigate } from "react-router-dom";
import { useState, useEffect } from "react";

export default function TaskInfo({
  isEditable, // false if view only, true if new task
  categoryIcons, // array of icon links, indexed 0-5
  category, // the category chosen in categoryTiles - used when creating a new task
  selectedTask, // task ID of clicked TaskCard - used when viewing a task
  tasks, // array of all tasks, only used when isEditable is false
  getTasks, // function to refresh task list
}) {
  const [title, setTitle] = useState("");
  const [description, setDescription] = useState("");
  const [location, setLocation] = useState("");
  const [duration, setDuration] = useState("");
  const [isDisabled, setIsDisabled] = useState(true);
  //const [creatorName, setCreatorName] = useState("");
  //const [contactNumber, setContactNumber] = useState("");

  useEffect(() => {
    setIsDisabled(!title || !description || !location || !duration);
  }, [title, description, location, duration]);

  const navigate = useNavigate();

  let categoryID = 0;
  let thisTask = {};

  const supabase = createClient(
    process.env.REACT_APP_SUPABASE_URL,
    process.env.REACT_APP_SUPABASE_KEY
  );

  if (isEditable) {
    categoryID = category - 1;
  } else {
    thisTask = tasks.find((task) => task.id === selectedTask);
    categoryID = thisTask.category_id - 1;
  }

  async function writeTask() {
    // write to database
    const { error } = await supabase.from("tasks").insert({
      title: title,
      description: description,
      location: location,
      duration: duration,
      creator_id: 1,
      category_id: category,
      status_id: 1,
    });

    if (error) {
      console.log("error", error);
    }
    getTasks();
    navigate(`/success`);
  }

  async function updateStatusID(newStatusID) {
    const { error } = await supabase
      .from("tasks")
      .update({ status_id: newStatusID })
      .match({ id: thisTask.id });
    if (error) {
      console.log("error", error);
    }
    getTasks();
    navigate(`/success`);
  }

  return (
    <div>
      <img
        src={categoryIcons[categoryID].image}
        alt="category icon"
        width="250"
      />

      <div>Title: </div>
      {isEditable ? (
        <input
          type="text"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          placeholder="Enter a short title"
        />
      ) : (
        <div>{thisTask.title}</div>
      )}
      <div>Description: </div>
      {isEditable ? (
        <input
          type="text"
          value={description}
          onChange={(e) => setDescription(e.target.value)}
          placeholder="Enter a description"
        />
      ) : (
        <div>{thisTask.description}</div>
      )}
      {!isEditable && (
        <div>
          <div>Date Posted:</div>
          <div>{thisTask.created_at}</div>
        </div>
      )}
      <div>Location: </div>
      {isEditable ? (
        <input
          type="text"
          value={location}
          onChange={(e) => setLocation(e.target.value)}
          placeholder="Enter a location"
        />
      ) : (
        <div>{thisTask.location}</div>
      )}
      <div>Duration: </div>
      {isEditable ? (
        <input
          type="text"
          value={duration}
          onChange={(e) => setDuration(e.target.value)}
          placeholder="Enter a duration"
        />
      ) : (
        <div>{thisTask.duration}</div>
      )}

      {!isEditable && (
        <div>
          <div>Name: </div>
          {thisTask.creator_id}
        </div>
      )}
      <div>Contact Information: </div>
      {isEditable ? <div>number / email</div> : <div>number / email</div>}
      {isEditable && (
        <button onClick={() => writeTask()} disabled={!title || !description || !location || !duration} className={isDisabled ? "disable-button" : "button"}>
          Submit
        </button>
      )}

           {!isEditable && thisTask.status_id === 1 && (
        <button className="button" onClick={() => updateStatusID(2)}>
          Accept
        </button>
      )}
      {!isEditable && thisTask.status_id === 2 && (
        <button className="button" onClick={() => updateStatusID(3)}>
          Complete!
        </button>
      )}
      {!isEditable && thisTask.status_id === 3 && (
        <button className="button" onClick={() => updateStatusID(4)}>
          Delete
        </button>
      )}
    </div>
  );
}

==== ./src/components/TaskList/taskList.js ====
import TaskCard from "../TaskCard/taskCard";

/*
Status IDs:
1: Available
2: Active
3: Completed
4. Archived
*/

export default function TaskList({
  tasks,
  onlyAvailable,
  setSelectedTask,
  categoryIcons,
}) {
  return (
    <div>
      {onlyAvailable && (
        <div className="browse-container">
          <div className="tasklist-container">
            {showTasks(tasks, 1, setSelectedTask, categoryIcons)}
          </div>
        </div>
      )}
      {!onlyAvailable && (
        <div className="browse-container">
          <h2>Active Tasks</h2>
          <div className="tasklist-container">
            {showTasks(tasks, 2, setSelectedTask, categoryIcons)}
          </div>

          <h2>Completed Tasks</h2>
          <div className="tasklist-container">
            {showTasks(tasks, 3, setSelectedTask, categoryIcons)}
          </div>
        </div>
      )}
    </div>
  );
}

// show only tasks of one status id
// but we also need to pass on these other 2 props to the TaskCard component
function showTasks(tasks, statusId, setSelectedTask, categoryIcons) {
  const filteredTasks = tasks.filter((task) => task.status_id === statusId);

  return filteredTasks.map((task) => (
    <div key={task.id}>
      <TaskCard
        task={task}
        setSelectedTask={setSelectedTask}
        categoryIcons={categoryIcons}
        // categoryID = {categoryID}
      />
    </div>
  ));
}


==== ./src/index.css ====
@import url("https://use.typekit.net/ycz4yvq.css");

/* Futura PT Bold
font-family: "futura-pt-bold", sans-serif;
font-weight: 700;
font-style: normal;

Futura PT Heavy
font-family: "futura-pt", sans-serif;
font-weight: 700;
font-style: normal; */

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont,'futura-pt','Futura PT Bold', 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
font-weight: 400;
font-style: normal;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}
==== ./src/index.js ====
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import 'bootstrap/dist/css/bootstrap.min.css';


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

==== ./src/pages/Browse.js ====
import TaskList from "../components/TaskList/taskList";
import CategoryScroll from "../components/CategoryScroll/categoryScroll";

export default function BrowsePage({ tasks, setSelectedTask, categoryIcons, category, setCategory }) {
  return (
    <div>
      <CategoryScroll 
        categoryIcons={categoryIcons} 
        category={category}
        setCategory={setCategory}
      />
      
      <TaskList
        tasks={tasks}
        onlyAvailable={true}
        setSelectedTask={setSelectedTask}
        categoryIcons={categoryIcons}
      />
    </div>
  );
}
==== ./src/pages/CreateTask.js ====
import TaskInfo from "../components/TaskInfo/taskInfo";
import CategoryScroll from "../components/CategoryScroll/categoryScroll";
//import { useEffect } from "react";

export default function CreateTaskPage({
  category,
  setCategory,
  categoryIcons,
  getTasks,
}) {
  return (
    <div>
      <CategoryScroll
        category={category}
        setCategory={setCategory}
        categoryIcons={categoryIcons}
      />
      <TaskInfo
        isEditable={true}
        category={category}
        categoryIcons={categoryIcons}
        getTasks={getTasks}
      />
    </div>
  );
}
==== ./src/pages/Home.js ====
import { Link } from "react-router-dom";
import illustrationPost from "../imgs/illustrations/post.png";
import illustrationVolunteer from "../imgs/illustrations/joy.png";
export default function HomePage() {
  return (
    <div className="home">
      <h1>How would you like to spread some kindness today?</h1>
      <div className="home-buttons">
        <Link to="/categories">
          <button className="button-blue">Post a Task</button>
        </Link>
        <Link to="/browse">
          <button className="button-green">Volunteer</button>
        </Link>
      </div>
      <div className="illustrationsHome">
        <img
          className="illustrationPost"
          src={illustrationPost}
          alt="illustration"
        />
        <img
          className="illustrationVolunteer"
          src={illustrationVolunteer}
          alt="illustration"
        />
      </div>
    </div>
  );
}
==== ./src/pages/MyTasks.js ====
import TaskList from "../components/TaskList/taskList";

export default function MyTasksPage({ tasks, setSelectedTask, categoryIcons }) {
  return (
    <div className="br">
      <TaskList
        showCategories={false}
        tasks={tasks}
        setSelectedTask={setSelectedTask}
        categoryIcons={categoryIcons}
      />
    </div>
  );
}
==== ./src/pages/SelectCategory.js ====
//import { Link } from "react-router-dom";
import CategoryTiles from "../components/CategoryTiles/categoryTiles.js";

export default function SelectCategoryPage({ setCategory, categoryIcons }) {
  return (
    <div>
      <CategoryTiles setCategory={setCategory} categoryIcons={categoryIcons} />
      {/* <Link to="/create">
        <button>Next</button>
      </Link> */}
    </div>
  );
}
==== ./src/pages/Success.js ====
import { Link } from "react-router-dom";
import HeartIcon from "../components/HeartIcon/heartIcon.js";
import Confetti from "react-confetti";

export default function SuccessPage() {
  const [windowWidth, windowHeight] = [window.innerWidth, window.innerHeight];

  return (
    <div className="success">
      <Confetti width={windowWidth.width} height={windowHeight.height} />
      <h1>Congratulations - thank you for spreading kindness!</h1>

      <HeartIcon />
      <Link to="/">
        <button className="button">Home</button>
      </Link>
      <Link to="/mytasks">
        <button className="button">My Tasks</button>
      </Link>
    </div>
  );
}
==== ./src/pages/ViewTask.js ====
import TaskInfo from "../components/TaskInfo/taskInfo";

export default function ViewTaskPage({
  categoryIcons,
  selectedTask,
  tasks,
  getTasks,
}) {
  return (
    <div>
      <TaskInfo
        isEditable={false}
        categoryIcons={categoryIcons}
        selectedTask={selectedTask}
        tasks={tasks}
        getTasks={getTasks}
      />
    </div>
  );
}
==== ./src/reportWebVitals.js ====
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;
==== ./src/setupTests.js ====
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';
